{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inc",
				"include"
			]
		]
	},
	"buffers":
	[
		{
			"file": "code/demo/app.c",
			"settings":
			{
				"buffer_size": 6982,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANgAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "#inc"
					},
					"BAAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAADbAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "include",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "include"
					},
					"AgAAANoAAAAAAAAA2gAAAAAAAAADAAAAaW5j2gAAAAAAAADhAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QAAAAAAAADdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAOIAAAAAAAAA4gAAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAOIAAAAAAAAA4gAAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "<foundation\\maths.h>"
					},
					"AQAAAOIAAAAAAAAA9gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					2,
					"left_delete",
					null,
					"AgAAANkAAAAAAAAA2QAAAAAAAAAdAAAAI2luY2x1ZGUgPGZvdW5kYXRpb25cbWF0aHMuaD7YAAAAAAAAANgAAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA9gAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n#incl"
					},
					"BgAAANgAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAADaAAAAAAAAANsAAAAAAAAAAAAAANsAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADdAAAAAAAAAAAAAADdAAAAAAAAAN4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_completion",
					{
						"completion": "include",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "include"
					},
					"AgAAANoAAAAAAAAA2gAAAAAAAAAEAAAAaW5jbNoAAAAAAAAA4QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					2,
					"left_delete",
					null,
					"AgAAANkAAAAAAAAA2QAAAAAAAAAKAAAAI2luY2x1ZGUgItgAAAAAAAAA2AAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA4wAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAANgAAAAAAAAA2AAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALcBAAAAAAAAuAEAAAAAAAAAAAAAuAEAAAAAAAC5AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwEAAAAAAAC3AQAAAAAAAAAAAAAAwGdA"
				],
				[
					43,
					2,
					"left_delete",
					null,
					"AgAAALgBAAAAAAAAuAEAAAAAAAABAAAACrcBAAAAAAAAtwEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAChoAAAAAAABKGwAAI2luY2x1ZGUgImFwaS5oIgoKI2luY2x1ZGUgImd1aS9ndWkuaCIKCiNpbmNsdWRlICJnbC9nbG9hZC5oIgoKI2luY2x1ZGUgImZvdW5kYXRpb24vY29tbW9uLmgiCgojaW5jbHVkZSAiZm91bmRhdGlvbi9jb2xvci5oIgojaW5jbHVkZSAiZm91bmRhdGlvbi9tYXRocy5oIgojaW5jbHVkZSAiZm91bmRhdGlvbi9wYXRoLmgiCiNpbmNsdWRlICJmb3VuZGF0aW9uL3N0cmluZ3MuaCIKCnR5cGVkZWYgc3RydWN0IEFwcFdpbmRvd3MKewogICAgYm9vbCBkZW1vOwogICAgYm9vbCBtZXRyaWNzOwogICAgYm9vbCBzdGF0czsKICAgIGJvb2wgZm9udHM7CiAgICBib29sIHN0eWxlOwp9IEFwcFdpbmRvd3M7CgplbnVtCnsKICAgIENVUlJfRElSX1NJWkUgPSAyNTYsCn07CgpzdHJ1Y3QgQXBwU3RhdGUKewogICAgUGxhdGZvcm0gKnBsYXQ7CiAgICBjZkFsbG9jYXRvciAqYWxsb2M7CgogICAgQXBwV2luZG93cyB3aW5kb3dzOwogICAgUmdiYTMyIGNsZWFyX2NvbG9yOwp9OwoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCkFQUF9BUEkgQVBQX0NSRUFURV9QUk9DKGFwcENyZWF0ZSkKewogICAgQ0ZfVU5VU0VEKGFyZ3YpOwogICAgQ0ZfVU5VU0VEKGFyZ2MpOwoKICAgIC8vIE5PVEUgKE1hdHRlbyk6IE1lbW9yeSBjb21lcyBjbGVhcmVkIHRvIDAKICAgIEFwcFN0YXRlICphcHAgPSBjZkFsbG9jKHBsYXQtPmhlYXAsIHNpemVvZigqYXBwKSk7CgogICAgYXBwLT5wbGF0ID0gcGxhdDsKICAgIGFwcC0+YWxsb2MgPSBwbGF0LT5oZWFwOwogICAgYXBwLT5jbGVhcl9jb2xvciA9IFJHQkEzMl9TT0xJRCgxMTUsIDE0MCwgMTUzKTsgLy8gUiA9IDAuNDUsIEcgPSAwLjU1LCBCID0gMC42MAoKICAgIC8vIEluaXQgRGVhciBJbWd1aQogICAgZ3VpSW5pdChwbGF0LT5ndWkpOwoKICAgIC8vIEluaXQgT3BlbkdsCiAgICBnbG9hZEluaXQocGxhdC0+Z2wpOwoKICAgIHJldHVybiBhcHA7Cn0KCkFQUF9BUEkgQVBQX1BST0MoYXBwRGVzdHJveSkKewogICAgY2ZGcmVlKGFwcC0+YWxsb2MsIGFwcCwgc2l6ZW9mKCphcHApKTsKfQoKLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnN0YXRpYyB2b2lkCmZ4RHJhdyhJbURyYXdMaXN0ICpkcmF3X2xpc3QsIEltVmVjMiBwMCwgSW1WZWMyIHAxLCBJbVZlYzIgc2l6ZSwgSW1WZWM0IG1vdXNlX2RhdGEsIEY2NCB0aW1lKQp7CiAgICBDRl9VTlVTRUQobW91c2VfZGF0YSk7CgogICAgSW1EcmF3TGlzdF9BZGRSZWN0KGRyYXdfbGlzdCwgcDAsIHAxLCBSR0JBMzJfUFVSUExFLCAwLjBmLCAwLCAxLjBmKTsKCiAgICBjaGFyIGJ1ZmZlclsxMDI0XTsKICAgIHN0clByaW50ZihidWZmZXIsIDEwMjQsICIlZiIsIHRpbWUpOwogICAgSW1EcmF3TGlzdF9BZGRUZXh0VmVjMihkcmF3X2xpc3QsIHAwLCBSR0JBMzJfUkVELCBidWZmZXIsIGJ1ZmZlciArIHN0ckxlbmd0aChidWZmZXIpKTsKCiAgICAvLyAxIEh6IHNpbnVzb2lkLCBZQVkhCgogICAgSW1WZWMyIHBvaW50c1sxMDI0XSA9IHswfTsKCiAgICBGMzIgY29uc3QgYW1wID0gY2ZNaW4oc2l6ZS54LCBzaXplLnkpIC8gNDsKCiAgICBGMzIgY29uc3QgeF9vZmZzZXQgPSAyICogYW1wOwogICAgRjMyIGNvbnN0IHhfc3BhY2UgPSBzaXplLnggLSB4X29mZnNldDsKICAgIEYzMiBjb25zdCB4X3N0ZXAgPSB4X3NwYWNlIC8gKENGX0FSUkFZX1NJWkUocG9pbnRzKSAtIDEpOwogICAgRjMyIGNvbnN0IHlfb2Zmc2V0ID0gc2l6ZS55IC8gMjsKCiAgICBGMzIgY29uc3QgcGkyID0gMiAqIGNmQWNvcygtMS4wZik7CiAgICBGMzIgY29uc3QgcmFkX3N0ZXAgPSAyICogcGkyIC8gKENGX0FSUkFZX1NJWkUocG9pbnRzKSAtIDEpOwogICAgRjMyIGNvbnN0IHBoYXNlID0gcGkyICogKEYzMil0aW1lOwoKICAgIEltVmVjMiBjb25zdCBjZW50ZXIgPSB7cDAueCArIGFtcCwgcDAueSArIHlfb2Zmc2V0fTsKICAgIEltVmVjMiBwb2xhciA9IHswfTsKCiAgICBmb3IgKFVzaXplIGkgPSAwOyBpIDwgQ0ZfQVJSQVlfU0laRShwb2ludHMpOyArK2kpCiAgICB7CiAgICAgICAgRjMyIHJhZCA9IChGMzIpaSAqIHJhZF9zdGVwICsgcGhhc2U7CiAgICAgICAgRjMyIHNpbiA9IGFtcCAqIGNmU2luKHJhZCk7CiAgICAgICAgRjMyIGNvcyA9IGFtcCAqIGNmQ29zKHJhZCk7CgogICAgICAgIHBvaW50c1tpXS54ID0gcDAueCArIHhfb2Zmc2V0ICsgeF9zdGVwICogKEYzMilpOwogICAgICAgIHBvaW50c1tpXS55ID0gcDAueSArIHlfb2Zmc2V0ICsgc2luOwoKICAgICAgICBwb2xhci54ID0gY2VudGVyLnggKyBjb3M7CiAgICAgICAgcG9sYXIueSA9IGNlbnRlci55ICsgc2luOwogICAgfQoKICAgIEltRHJhd0xpc3RfQWRkQ2lyY2xlKGRyYXdfbGlzdCwgY2VudGVyLCBhbXAsIFJHQkEzMl9ZRUxMT1csIDAsIDEuMGYpOwogICAgSW1EcmF3TGlzdF9BZGRMaW5lKGRyYXdfbGlzdCwgY2VudGVyLCBwb2xhciwgUkdCQTMyX1lFTExPVywgMS4wZik7CiAgICBJbURyYXdMaXN0X0FkZExpbmUoZHJhd19saXN0LCBwb2xhciwgcG9pbnRzWzBdLCBSR0JBMzJfWUVMTE9XLCAxLjBmKTsKICAgIEltRHJhd0xpc3RfQWRkUG9seWxpbmUoZHJhd19saXN0LCBwb2ludHMsIENGX0FSUkFZX1NJWkUocG9pbnRzKSwgUkdCQTMyX1lFTExPVywgMCwgMS4wZik7CgogICAgSW1EcmF3TGlzdF9BZGRMaW5lKGRyYXdfbGlzdCwgKEltVmVjMil7cDAueCwgcDAueSArIHlfb2Zmc2V0fSwgKEltVmVjMil7cDEueCwgcDAueSArIHlfb2Zmc2V0fSwKICAgICAgICAgICAgICAgICAgICAgICBSR0JBMzJfUFVSUExFLCAxLjBmKTsKICAgIEltRHJhd0xpc3RfQWRkTGluZShkcmF3X2xpc3QsIChJbVZlYzIpe3AwLnggKyBhbXAsIHAwLnl9LCAoSW1WZWMyKXtwMC54ICsgYW1wLCBwMS55fSwKICAgICAgICAgICAgICAgICAgICAgICBSR0JBMzJfUFVSUExFLCAxLjBmKTsKICAgIEltRHJhd0xpc3RfQWRkTGluZShkcmF3X2xpc3QsIChJbVZlYzIpe3AwLnggKyAyICogYW1wLCBwMC55fSwgKEltVmVjMil7cDAueCArIDIgKiBhbXAsIHAxLnl9LAogICAgICAgICAgICAgICAgICAgICAgIFJHQkEzMl9QVVJQTEUsIDEuMGYpOwoKICAgIEltRHJhd0xpc3RfQWRkQ2lyY2xlRmlsbGVkKGRyYXdfbGlzdCwgKEltVmVjMil7bW91c2VfZGF0YS54LCBtb3VzZV9kYXRhLnl9LCA1LjBmLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkdCQTMyX09SQU5HRV9SRUQsIDApOwp9CgpzdGF0aWMgdm9pZApmeFdpbmRvdygpCnsKICAgIEltR3VpSU8gKmlvID0gaWdHZXRJTygpOwogICAgSW1WZWMyIHNpemUsIHAwLCBwMTsKICAgIGlnU2V0TmV4dFdpbmRvd1NpemUoKEltVmVjMil7MzIwLCAxODB9LCBJbUd1aUNvbmRfT25jZSk7CiAgICBpZ0JlZ2luKCJGWCIsIE5VTEwsIDApOwogICAgaWdHZXRDb250ZW50UmVnaW9uQXZhaWwoJnNpemUpOwogICAgaWdJbnZpc2libGVCdXR0b24oImNhbnZhcyIsIHNpemUsIEltR3VpQnV0dG9uRmxhZ3NfTm9uZSk7CiAgICBpZ0dldEl0ZW1SZWN0TWluKCZwMCk7CiAgICBpZ0dldEl0ZW1SZWN0TWF4KCZwMSk7CgogICAgSW1WZWM0IG1vdXNlX2RhdGE7CiAgICBtb3VzZV9kYXRhLnggPSBpby0+TW91c2VQb3MueDsgLy8gKGlvLT5Nb3VzZVBvcy54IC0gcDAueCkgLyBzaXplLng7CiAgICBtb3VzZV9kYXRhLnkgPSBpby0+TW91c2VQb3MueTsgLy8gKGlvLT5Nb3VzZVBvcy55IC0gcDAueSkgLyBzaXplLnk7CiAgICBtb3VzZV9kYXRhLnogPSBpby0+TW91c2VEb3duRHVyYXRpb25bMF07CiAgICBtb3VzZV9kYXRhLncgPSBpby0+TW91c2VEb3duRHVyYXRpb25bMV07CgogICAgSW1EcmF3TGlzdCAqZHJhd19saXN0ID0gaWdHZXRXaW5kb3dEcmF3TGlzdCgpOwogICAgSW1EcmF3TGlzdF9QdXNoQ2xpcFJlY3QoZHJhd19saXN0LCBwMCwgcDEsIHRydWUpOwogICAgZnhEcmF3KGRyYXdfbGlzdCwgcDAsIHAxLCBzaXplLCBtb3VzZV9kYXRhLCBpZ0dldFRpbWUoKSk7CiAgICBJbURyYXdMaXN0X1BvcENsaXBSZWN0KGRyYXdfbGlzdCk7CgogICAgaWdFbmQoKTsKfQoKc3RhdGljIHZvaWQKZ3VpQ2xvY2soVGltZSB0aW1lKQp7CiAgICBJNjQgY29uc3Qgc2Vjc19wZXJfaG91ciA9IDYwICogNjA7CiAgICBJNjQgY29uc3Qgc2Vjc19wZXJfZGF5ID0gc2Vjc19wZXJfaG91ciAqIDI0OwogICAgSTY0IGNvbnN0IHNlY3MgPSB0aW1lLm5hbm9zZWNvbmRzIC8gMTAwMDAwMDAwMDsKICAgIEk2NCBjb25zdCBtc19yZW1haW5kZXIgPSAodGltZS5uYW5vc2Vjb25kcyAtIHNlY3MgKiAxMDAwMDAwMDAwKSAvIDEwMDAwMDA7CgogICAgLy8gRXVjbGlkZWFuIHJlbWluZGVyIHRvIGNvbXB1dGUgdGhlIG51bWJlciBvZiBzZWNvbmRzIGluIGEgZGF5IGJvdW5kYXJ5CiAgICBJNjQgdG90YWxfc2VjcyA9ICgoc2VjcyAlIHNlY3NfcGVyX2RheSkgKyBzZWNzX3Blcl9kYXkpICUgc2Vjc19wZXJfZGF5OwogICAgSTY0IGhvdXJzID0gdG90YWxfc2VjcyAvIHNlY3NfcGVyX2hvdXI7CiAgICBJNjQgbWlucyA9ICh0b3RhbF9zZWNzIC0gaG91cnMgKiBzZWNzX3Blcl9ob3VyKSAvIDYwOwogICAgSTY0IGZpbmFsX3NlY3MgPSB0b3RhbF9zZWNzIC0gbWlucyAqIDYwOwoKICAgIGlnVGV4dCgiJTAyZDolMDJkOiUwMmQuJTAzZCIsIGhvdXJzLCBtaW5zLCBmaW5hbF9zZWNzLCBtc19yZW1haW5kZXIpOwp9CgpBUFBfQVBJIEFQUF9VUERBVEVfUFJPQyhhcHBVcGRhdGUpCnsKICAgIEFwcFVwZGF0ZVJlc3VsdCByZXN1bHQgPSB7LmZsYWdzID0gQXBwVXBkYXRlRmxhZ3NfTm9uZX07CgogICAgaWYgKGlnQmVnaW5NYWluTWVudUJhcigpKQogICAgewogICAgICAgIGlmIChpZ0JlZ2luTWVudSgiRmlsZSIsIHRydWUpKSBpZ0VuZE1lbnUoKTsKCiAgICAgICAgaWYgKGlnQmVnaW5NZW51KCJXaW5kb3dzIiwgdHJ1ZSkpCiAgICAgICAgewogICAgICAgICAgICBpZ01lbnVJdGVtQm9vbFB0cigiU3R5bGUgZWRpdG9yIiwgTlVMTCwgJmFwcC0+d2luZG93cy5zdHlsZSwgdHJ1ZSk7CiAgICAgICAgICAgIGlnTWVudUl0ZW1Cb29sUHRyKCJGb250IG9wdGlvbnMiLCBOVUxMLCAmYXBwLT53aW5kb3dzLmZvbnRzLCB0cnVlKTsKICAgICAgICAgICAgaWdTZXBhcmF0b3IoKTsKICAgICAgICAgICAgaWdNZW51SXRlbUJvb2xQdHIoIlN0YXRzIiwgTlVMTCwgJmFwcC0+d2luZG93cy5zdGF0cywgdHJ1ZSk7CiAgICAgICAgICAgIGlnTWVudUl0ZW1Cb29sUHRyKCJNZXRyaWNzIiwgTlVMTCwgJmFwcC0+d2luZG93cy5tZXRyaWNzLCB0cnVlKTsKICAgICAgICAgICAgaWdTZXBhcmF0b3IoKTsKICAgICAgICAgICAgaWdNZW51SXRlbUJvb2xQdHIoIkRlbW8gd2luZG93IiwgTlVMTCwgJmFwcC0+d2luZG93cy5kZW1vLCB0cnVlKTsKICAgICAgICAgICAgaWdFbmRNZW51KCk7CiAgICAgICAgfQoKICAgICAgICBpZ0VuZE1haW5NZW51QmFyKCk7CiAgICB9CgogICAgaWYgKGFwcC0+d2luZG93cy5kZW1vKSBpZ1Nob3dEZW1vV2luZG93KCZhcHAtPndpbmRvd3MuZGVtbyk7CgogICAgaWYgKGFwcC0+d2luZG93cy5mb250cykKICAgIHsKICAgICAgICBpZ0JlZ2luKCJGb250IE9wdGlvbnMiLCAmYXBwLT53aW5kb3dzLmZvbnRzLCAwKTsKCiAgICAgICAgaWYgKGd1aUZvbnRPcHRpb25zRWRpdChvcHRzKSkKICAgICAgICB7CiAgICAgICAgICAgIHJlc3VsdC5mbGFncyB8PSBBcHBVcGRhdGVGbGFnc19SZWJ1aWxkRm9udHM7CiAgICAgICAgfQoKICAgICAgICBpZ0VuZCgpOwogICAgfQoKICAgIGlmIChhcHAtPndpbmRvd3Muc3RhdHMpCiAgICB7CiAgICAgICAgUGxhdGZvcm0gKnBsYXQgPSBhcHAtPnBsYXQ7CiAgICAgICAgRjY0IGZyYW1lcmF0ZSA9IChGNjQpaWdHZXRJTygpLT5GcmFtZXJhdGU7CgogICAgICAgIGlnQmVnaW4oIkFwcGxpY2F0aW9uIHN0YXRzIHN0YXRzIiwgJmFwcC0+d2luZG93cy5zdGF0cywgMCk7CiAgICAgICAgaWdUZXh0KCJBdmVyYWdlICUuM2YgbXMvZnJhbWUgKCUuMWYgRlBTKSIsIDEwMDAuMCAvIGZyYW1lcmF0ZSwgZnJhbWVyYXRlKTsKICAgICAgICBpZ1RleHQoIkFsbG9jYXRlZCAlLjNma2IgaW4gJXp1IGJsb2NrcyIsIChGNjQpcGxhdC0+aGVhcF9zaXplIC8gMTAyNCwgcGxhdC0+aGVhcF9ibG9ja3MpOwogICAgICAgIGlnRW5kKCk7CiAgICB9CgogICAgaWYgKGFwcC0+d2luZG93cy5zdHlsZSkKICAgIHsKICAgICAgICBpZ0JlZ2luKCJTdHlsZSBFZGl0b3IiLCAmYXBwLT53aW5kb3dzLnN0eWxlLCAwKTsKICAgICAgICBpZ1Nob3dTdHlsZUVkaXRvcihOVUxMKTsKICAgICAgICBpZ0VuZCgpOwogICAgfQoKICAgIGlmIChhcHAtPndpbmRvd3MubWV0cmljcykKICAgIHsKICAgICAgICBpZ1Nob3dNZXRyaWNzV2luZG93KCZhcHAtPndpbmRvd3MubWV0cmljcyk7CiAgICB9CgogICAgaWdCZWdpbigiVGVzdCIsIE5VTEwsIDApOwoKICAgIHN0YXRpYyBGMzIgZiA9IDA7CgogICAgaWdDaGVja2JveCgiRGVtbyBXaW5kb3ciLCAmYXBwLT53aW5kb3dzLmRlbW8pOwogICAgaWdTbGlkZXJGbG9hdCgiZmxvYXQiLCAmZiwgMC4wZiwgMS4wZiwgIiUuM2YiLCAwKTsKICAgIGd1aUNvbG9yRWRpdCgiY2xlYXIgY29sb3IiLCAmYXBwLT5jbGVhcl9jb2xvcik7CiAgICBpZ1NlcGFyYXRvcigpOwogICAgZ3VpQ2xvY2soYXBwLT5wbGF0LT5jbG9jaygpKTsKICAgIGlnU2VwYXJhdG9yKCk7CiAgICBpZ1RleHQoIk9wZW5HTCB2ZXJzaW9uOlx0JXMiLCBnbEdldFN0cmluZyhHTF9WRVJTSU9OKSk7CiAgICBpZ1RleHQoIk9wZW5HTCByZW5kZXJlcjpcdCVzIiwgZ2xHZXRTdHJpbmcoR0xfUkVOREVSRVIpKTsKICAgIGlnVGV4dCgiT3BlbkdMIHNoYWRlciB2ZXJzaW9uOlx0JXMiLCBnbEdldFN0cmluZyhHTF9TSEFESU5HX0xBTkdVQUdFX1ZFUlNJT04pKTsKICAgIGlnRW5kKCk7CgogICAgZnhXaW5kb3coKTsKCiAgICByZXN1bHQuYmFja19jb2xvciA9IGFwcC0+Y2xlYXJfY29sb3I7CgogICAgcmV0dXJuIHJlc3VsdDsKfQo",
					"AQAAAAAAAAABAAAAPQIAAAAAAAA9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAA/QAAAAAAAAD9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALMBAAAAAAAAtAEAAAAAAAAAAAAAtAEAAAAAAAC1AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAwGdA"
				],
				[
					53,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAARhsAAAAAAABIGwAAI2luY2x1ZGUgImFwaS5oIgojaW5jbHVkZSAiZm91bmRhdGlvbi9jb2xvci5oIgojaW5jbHVkZSAiZm91bmRhdGlvbi9jb21tb24uaCIKI2luY2x1ZGUgImZvdW5kYXRpb24vbWF0aHMuaCIKI2luY2x1ZGUgImZvdW5kYXRpb24vcGF0aC5oIgojaW5jbHVkZSAiZm91bmRhdGlvbi9zdHJpbmdzLmgiCiNpbmNsdWRlICJnbC9nbG9hZC5oIgojaW5jbHVkZSAiZ3VpL2d1aS5oIgoKdHlwZWRlZiBzdHJ1Y3QgQXBwV2luZG93cwp7CiAgICBib29sIGRlbW87CiAgICBib29sIG1ldHJpY3M7CiAgICBib29sIHN0YXRzOwogICAgYm9vbCBmb250czsKICAgIGJvb2wgc3R5bGU7Cn0gQXBwV2luZG93czsKCmVudW0KewogICAgQ1VSUl9ESVJfU0laRSA9IDI1NiwKfTsKCnN0cnVjdCBBcHBTdGF0ZQp7CiAgICBQbGF0Zm9ybSAqcGxhdDsKICAgIGNmQWxsb2NhdG9yICphbGxvYzsKCgoKICAgIEFwcFdpbmRvd3Mgd2luZG93czsKICAgIFJnYmEzMiBjbGVhcl9jb2xvcjsKfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpBUFBfQVBJIEFQUF9DUkVBVEVfUFJPQyhhcHBDcmVhdGUpCnsKICAgIENGX1VOVVNFRChhcmd2KTsKICAgIENGX1VOVVNFRChhcmdjKTsKCiAgICAvLyBOT1RFIChNYXR0ZW8pOiBNZW1vcnkgY29tZXMgY2xlYXJlZCB0byAwCiAgICBBcHBTdGF0ZSAqYXBwID0gY2ZBbGxvYyhwbGF0LT5oZWFwLCBzaXplb2YoKmFwcCkpOwoKICAgIGFwcC0+cGxhdCA9IHBsYXQ7CiAgICBhcHAtPmFsbG9jID0gcGxhdC0+aGVhcDsKICAgIGFwcC0+Y2xlYXJfY29sb3IgPSBSR0JBMzJfU09MSUQoMTE1LCAxNDAsIDE1Myk7IC8vIFIgPSAwLjQ1LCBHID0gMC41NSwgQiA9IDAuNjAKCiAgICAvLyBJbml0IERlYXIgSW1ndWkKICAgIGd1aUluaXQocGxhdC0+Z3VpKTsKCiAgICAvLyBJbml0IE9wZW5HbAogICAgZ2xvYWRJbml0KHBsYXQtPmdsKTsKCiAgICByZXR1cm4gYXBwOwp9CgpBUFBfQVBJIEFQUF9QUk9DKGFwcERlc3Ryb3kpCnsKICAgIGNmRnJlZShhcHAtPmFsbG9jLCBhcHAsIHNpemVvZigqYXBwKSk7Cn0KCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpzdGF0aWMgdm9pZApmeERyYXcoSW1EcmF3TGlzdCAqZHJhd19saXN0LCBJbVZlYzIgcDAsIEltVmVjMiBwMSwgSW1WZWMyIHNpemUsIEltVmVjNCBtb3VzZV9kYXRhLCBGNjQgdGltZSkKewogICAgQ0ZfVU5VU0VEKG1vdXNlX2RhdGEpOwoKICAgIEltRHJhd0xpc3RfQWRkUmVjdChkcmF3X2xpc3QsIHAwLCBwMSwgUkdCQTMyX1BVUlBMRSwgMC4wZiwgMCwgMS4wZik7CgogICAgY2hhciBidWZmZXJbMTAyNF07CiAgICBzdHJQcmludGYoYnVmZmVyLCAxMDI0LCAiJWYiLCB0aW1lKTsKICAgIEltRHJhd0xpc3RfQWRkVGV4dFZlYzIoZHJhd19saXN0LCBwMCwgUkdCQTMyX1JFRCwgYnVmZmVyLCBidWZmZXIgKyBzdHJMZW5ndGgoYnVmZmVyKSk7CgogICAgLy8gMSBIeiBzaW51c29pZCwgWUFZIQoKICAgIEltVmVjMiBwb2ludHNbMTAyNF0gPSB7MH07CgogICAgRjMyIGNvbnN0IGFtcCA9IGNmTWluKHNpemUueCwgc2l6ZS55KSAvIDQ7CgogICAgRjMyIGNvbnN0IHhfb2Zmc2V0ID0gMiAqIGFtcDsKICAgIEYzMiBjb25zdCB4X3NwYWNlID0gc2l6ZS54IC0geF9vZmZzZXQ7CiAgICBGMzIgY29uc3QgeF9zdGVwID0geF9zcGFjZSAvIChDRl9BUlJBWV9TSVpFKHBvaW50cykgLSAxKTsKICAgIEYzMiBjb25zdCB5X29mZnNldCA9IHNpemUueSAvIDI7CgogICAgRjMyIGNvbnN0IHBpMiA9IDIgKiBjZkFjb3MoLTEuMGYpOwogICAgRjMyIGNvbnN0IHJhZF9zdGVwID0gMiAqIHBpMiAvIChDRl9BUlJBWV9TSVpFKHBvaW50cykgLSAxKTsKICAgIEYzMiBjb25zdCBwaGFzZSA9IHBpMiAqIChGMzIpdGltZTsKCiAgICBJbVZlYzIgY29uc3QgY2VudGVyID0ge3AwLnggKyBhbXAsIHAwLnkgKyB5X29mZnNldH07CiAgICBJbVZlYzIgcG9sYXIgPSB7MH07CgogICAgZm9yIChVc2l6ZSBpID0gMDsgaSA8IENGX0FSUkFZX1NJWkUocG9pbnRzKTsgKytpKQogICAgewogICAgICAgIEYzMiByYWQgPSAoRjMyKWkgKiByYWRfc3RlcCArIHBoYXNlOwogICAgICAgIEYzMiBzaW4gPSBhbXAgKiBjZlNpbihyYWQpOwogICAgICAgIEYzMiBjb3MgPSBhbXAgKiBjZkNvcyhyYWQpOwoKICAgICAgICBwb2ludHNbaV0ueCA9IHAwLnggKyB4X29mZnNldCArIHhfc3RlcCAqIChGMzIpaTsKICAgICAgICBwb2ludHNbaV0ueSA9IHAwLnkgKyB5X29mZnNldCArIHNpbjsKCiAgICAgICAgcG9sYXIueCA9IGNlbnRlci54ICsgY29zOwogICAgICAgIHBvbGFyLnkgPSBjZW50ZXIueSArIHNpbjsKICAgIH0KCiAgICBJbURyYXdMaXN0X0FkZENpcmNsZShkcmF3X2xpc3QsIGNlbnRlciwgYW1wLCBSR0JBMzJfWUVMTE9XLCAwLCAxLjBmKTsKICAgIEltRHJhd0xpc3RfQWRkTGluZShkcmF3X2xpc3QsIGNlbnRlciwgcG9sYXIsIFJHQkEzMl9ZRUxMT1csIDEuMGYpOwogICAgSW1EcmF3TGlzdF9BZGRMaW5lKGRyYXdfbGlzdCwgcG9sYXIsIHBvaW50c1swXSwgUkdCQTMyX1lFTExPVywgMS4wZik7CiAgICBJbURyYXdMaXN0X0FkZFBvbHlsaW5lKGRyYXdfbGlzdCwgcG9pbnRzLCBDRl9BUlJBWV9TSVpFKHBvaW50cyksIFJHQkEzMl9ZRUxMT1csIDAsIDEuMGYpOwoKICAgIEltRHJhd0xpc3RfQWRkTGluZShkcmF3X2xpc3QsIChJbVZlYzIpe3AwLngsIHAwLnkgKyB5X29mZnNldH0sIChJbVZlYzIpe3AxLngsIHAwLnkgKyB5X29mZnNldH0sCiAgICAgICAgICAgICAgICAgICAgICAgUkdCQTMyX1BVUlBMRSwgMS4wZik7CiAgICBJbURyYXdMaXN0X0FkZExpbmUoZHJhd19saXN0LCAoSW1WZWMyKXtwMC54ICsgYW1wLCBwMC55fSwgKEltVmVjMil7cDAueCArIGFtcCwgcDEueX0sCiAgICAgICAgICAgICAgICAgICAgICAgUkdCQTMyX1BVUlBMRSwgMS4wZik7CiAgICBJbURyYXdMaXN0X0FkZExpbmUoZHJhd19saXN0LCAoSW1WZWMyKXtwMC54ICsgMiAqIGFtcCwgcDAueX0sIChJbVZlYzIpe3AwLnggKyAyICogYW1wLCBwMS55fSwKICAgICAgICAgICAgICAgICAgICAgICBSR0JBMzJfUFVSUExFLCAxLjBmKTsKCiAgICBJbURyYXdMaXN0X0FkZENpcmNsZUZpbGxlZChkcmF3X2xpc3QsIChJbVZlYzIpe21vdXNlX2RhdGEueCwgbW91c2VfZGF0YS55fSwgNS4wZiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJHQkEzMl9PUkFOR0VfUkVELCAwKTsKfQoKc3RhdGljIHZvaWQKZnhXaW5kb3coKQp7CiAgICBJbUd1aUlPICppbyA9IGlnR2V0SU8oKTsKICAgIEltVmVjMiBzaXplLCBwMCwgcDE7CiAgICBpZ1NldE5leHRXaW5kb3dTaXplKChJbVZlYzIpezMyMCwgMTgwfSwgSW1HdWlDb25kX09uY2UpOwogICAgaWdCZWdpbigiRlgiLCBOVUxMLCAwKTsKICAgIGlnR2V0Q29udGVudFJlZ2lvbkF2YWlsKCZzaXplKTsKICAgIGlnSW52aXNpYmxlQnV0dG9uKCJjYW52YXMiLCBzaXplLCBJbUd1aUJ1dHRvbkZsYWdzX05vbmUpOwogICAgaWdHZXRJdGVtUmVjdE1pbigmcDApOwogICAgaWdHZXRJdGVtUmVjdE1heCgmcDEpOwoKICAgIEltVmVjNCBtb3VzZV9kYXRhOwogICAgbW91c2VfZGF0YS54ID0gaW8tPk1vdXNlUG9zLng7IC8vIChpby0+TW91c2VQb3MueCAtIHAwLngpIC8gc2l6ZS54OwogICAgbW91c2VfZGF0YS55ID0gaW8tPk1vdXNlUG9zLnk7IC8vIChpby0+TW91c2VQb3MueSAtIHAwLnkpIC8gc2l6ZS55OwogICAgbW91c2VfZGF0YS56ID0gaW8tPk1vdXNlRG93bkR1cmF0aW9uWzBdOwogICAgbW91c2VfZGF0YS53ID0gaW8tPk1vdXNlRG93bkR1cmF0aW9uWzFdOwoKICAgIEltRHJhd0xpc3QgKmRyYXdfbGlzdCA9IGlnR2V0V2luZG93RHJhd0xpc3QoKTsKICAgIEltRHJhd0xpc3RfUHVzaENsaXBSZWN0KGRyYXdfbGlzdCwgcDAsIHAxLCB0cnVlKTsKICAgIGZ4RHJhdyhkcmF3X2xpc3QsIHAwLCBwMSwgc2l6ZSwgbW91c2VfZGF0YSwgaWdHZXRUaW1lKCkpOwogICAgSW1EcmF3TGlzdF9Qb3BDbGlwUmVjdChkcmF3X2xpc3QpOwoKICAgIGlnRW5kKCk7Cn0KCnN0YXRpYyB2b2lkCmd1aUNsb2NrKFRpbWUgdGltZSkKewogICAgSTY0IGNvbnN0IHNlY3NfcGVyX2hvdXIgPSA2MCAqIDYwOwogICAgSTY0IGNvbnN0IHNlY3NfcGVyX2RheSA9IHNlY3NfcGVyX2hvdXIgKiAyNDsKICAgIEk2NCBjb25zdCBzZWNzID0gdGltZS5uYW5vc2Vjb25kcyAvIDEwMDAwMDAwMDA7CiAgICBJNjQgY29uc3QgbXNfcmVtYWluZGVyID0gKHRpbWUubmFub3NlY29uZHMgLSBzZWNzICogMTAwMDAwMDAwMCkgLyAxMDAwMDAwOwoKICAgIC8vIEV1Y2xpZGVhbiByZW1pbmRlciB0byBjb21wdXRlIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpbiBhIGRheSBib3VuZGFyeQogICAgSTY0IHRvdGFsX3NlY3MgPSAoKHNlY3MgJSBzZWNzX3Blcl9kYXkpICsgc2Vjc19wZXJfZGF5KSAlIHNlY3NfcGVyX2RheTsKICAgIEk2NCBob3VycyA9IHRvdGFsX3NlY3MgLyBzZWNzX3Blcl9ob3VyOwogICAgSTY0IG1pbnMgPSAodG90YWxfc2VjcyAtIGhvdXJzICogc2Vjc19wZXJfaG91cikgLyA2MDsKICAgIEk2NCBmaW5hbF9zZWNzID0gdG90YWxfc2VjcyAtIG1pbnMgKiA2MDsKCiAgICBpZ1RleHQoIiUwMmQ6JTAyZDolMDJkLiUwM2QiLCBob3VycywgbWlucywgZmluYWxfc2VjcywgbXNfcmVtYWluZGVyKTsKfQoKQVBQX0FQSSBBUFBfVVBEQVRFX1BST0MoYXBwVXBkYXRlKQp7CiAgICBBcHBVcGRhdGVSZXN1bHQgcmVzdWx0ID0gey5mbGFncyA9IEFwcFVwZGF0ZUZsYWdzX05vbmV9OwoKICAgIGlmIChpZ0JlZ2luTWFpbk1lbnVCYXIoKSkKICAgIHsKICAgICAgICBpZiAoaWdCZWdpbk1lbnUoIkZpbGUiLCB0cnVlKSkgaWdFbmRNZW51KCk7CgogICAgICAgIGlmIChpZ0JlZ2luTWVudSgiV2luZG93cyIsIHRydWUpKQogICAgICAgIHsKICAgICAgICAgICAgaWdNZW51SXRlbUJvb2xQdHIoIlN0eWxlIGVkaXRvciIsIE5VTEwsICZhcHAtPndpbmRvd3Muc3R5bGUsIHRydWUpOwogICAgICAgICAgICBpZ01lbnVJdGVtQm9vbFB0cigiRm9udCBvcHRpb25zIiwgTlVMTCwgJmFwcC0+d2luZG93cy5mb250cywgdHJ1ZSk7CiAgICAgICAgICAgIGlnU2VwYXJhdG9yKCk7CiAgICAgICAgICAgIGlnTWVudUl0ZW1Cb29sUHRyKCJTdGF0cyIsIE5VTEwsICZhcHAtPndpbmRvd3Muc3RhdHMsIHRydWUpOwogICAgICAgICAgICBpZ01lbnVJdGVtQm9vbFB0cigiTWV0cmljcyIsIE5VTEwsICZhcHAtPndpbmRvd3MubWV0cmljcywgdHJ1ZSk7CiAgICAgICAgICAgIGlnU2VwYXJhdG9yKCk7CiAgICAgICAgICAgIGlnTWVudUl0ZW1Cb29sUHRyKCJEZW1vIHdpbmRvdyIsIE5VTEwsICZhcHAtPndpbmRvd3MuZGVtbywgdHJ1ZSk7CiAgICAgICAgICAgIGlnRW5kTWVudSgpOwogICAgICAgIH0KCiAgICAgICAgaWdFbmRNYWluTWVudUJhcigpOwogICAgfQoKICAgIGlmIChhcHAtPndpbmRvd3MuZGVtbykgaWdTaG93RGVtb1dpbmRvdygmYXBwLT53aW5kb3dzLmRlbW8pOwoKICAgIGlmIChhcHAtPndpbmRvd3MuZm9udHMpCiAgICB7CiAgICAgICAgaWdCZWdpbigiRm9udCBPcHRpb25zIiwgJmFwcC0+d2luZG93cy5mb250cywgMCk7CgogICAgICAgIGlmIChndWlGb250T3B0aW9uc0VkaXQob3B0cykpCiAgICAgICAgewogICAgICAgICAgICByZXN1bHQuZmxhZ3MgfD0gQXBwVXBkYXRlRmxhZ3NfUmVidWlsZEZvbnRzOwogICAgICAgIH0KCiAgICAgICAgaWdFbmQoKTsKICAgIH0KCiAgICBpZiAoYXBwLT53aW5kb3dzLnN0YXRzKQogICAgewogICAgICAgIFBsYXRmb3JtICpwbGF0ID0gYXBwLT5wbGF0OwogICAgICAgIEY2NCBmcmFtZXJhdGUgPSAoRjY0KWlnR2V0SU8oKS0+RnJhbWVyYXRlOwoKICAgICAgICBpZ0JlZ2luKCJBcHBsaWNhdGlvbiBzdGF0cyBzdGF0cyIsICZhcHAtPndpbmRvd3Muc3RhdHMsIDApOwogICAgICAgIGlnVGV4dCgiQXZlcmFnZSAlLjNmIG1zL2ZyYW1lICglLjFmIEZQUykiLCAxMDAwLjAgLyBmcmFtZXJhdGUsIGZyYW1lcmF0ZSk7CiAgICAgICAgaWdUZXh0KCJBbGxvY2F0ZWQgJS4zZmtiIGluICV6dSBibG9ja3MiLCAoRjY0KXBsYXQtPmhlYXBfc2l6ZSAvIDEwMjQsIHBsYXQtPmhlYXBfYmxvY2tzKTsKICAgICAgICBpZ0VuZCgpOwogICAgfQoKICAgIGlmIChhcHAtPndpbmRvd3Muc3R5bGUpCiAgICB7CiAgICAgICAgaWdCZWdpbigiU3R5bGUgRWRpdG9yIiwgJmFwcC0+d2luZG93cy5zdHlsZSwgMCk7CiAgICAgICAgaWdTaG93U3R5bGVFZGl0b3IoTlVMTCk7CiAgICAgICAgaWdFbmQoKTsKICAgIH0KCiAgICBpZiAoYXBwLT53aW5kb3dzLm1ldHJpY3MpCiAgICB7CiAgICAgICAgaWdTaG93TWV0cmljc1dpbmRvdygmYXBwLT53aW5kb3dzLm1ldHJpY3MpOwogICAgfQoKICAgIGlnQmVnaW4oIlRlc3QiLCBOVUxMLCAwKTsKCiAgICBzdGF0aWMgRjMyIGYgPSAwOwoKICAgIGlnQ2hlY2tib3goIkRlbW8gV2luZG93IiwgJmFwcC0+d2luZG93cy5kZW1vKTsKICAgIGlnU2xpZGVyRmxvYXQoImZsb2F0IiwgJmYsIDAuMGYsIDEuMGYsICIlLjNmIiwgMCk7CiAgICBndWlDb2xvckVkaXQoImNsZWFyIGNvbG9yIiwgJmFwcC0+Y2xlYXJfY29sb3IpOwogICAgaWdTZXBhcmF0b3IoKTsKICAgIGd1aUNsb2NrKGFwcC0+cGxhdC0+Y2xvY2soKSk7CiAgICBpZ1NlcGFyYXRvcigpOwogICAgaWdUZXh0KCJPcGVuR0wgdmVyc2lvbjpcdCVzIiwgZ2xHZXRTdHJpbmcoR0xfVkVSU0lPTikpOwogICAgaWdUZXh0KCJPcGVuR0wgcmVuZGVyZXI6XHQlcyIsIGdsR2V0U3RyaW5nKEdMX1JFTkRFUkVSKSk7CiAgICBpZ1RleHQoIk9wZW5HTCBzaGFkZXIgdmVyc2lvbjpcdCVzIiwgZ2xHZXRTdHJpbmcoR0xfU0hBRElOR19MQU5HVUFHRV9WRVJTSU9OKSk7CiAgICBpZ0VuZCgpOwoKICAgIGZ4V2luZG93KCk7CgogICAgcmVzdWx0LmJhY2tfY29sb3IgPSBhcHAtPmNsZWFyX2NvbG9yOwoKICAgIHJldHVybiByZXN1bHQ7Cn0K",
					"AQAAAAAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAAuQIAAAAAAAC5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAA4wEAAAAAAADjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"",
					"AQAAAAAAAAABAAAArgAAAAAAAACuAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "code/api.h",
			"settings":
			{
				"buffer_size": 3142,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "code/foundation/common.h",
			"redo_stack":
			[
				[
					22,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AQAAAIQNAAAAAAAAhA0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAhQ0AAAAAAACFDQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 13242,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "cscratch (Windows)",
	"build_system_choices":
	[
		[
			[
				[
					"cscratch (Windows)",
					""
				],
				[
					"cscratch (Windows)",
					"Continuous"
				],
				[
					"cscratch (Windows)",
					"NightlyTest"
				],
				[
					"cscratch (Windows)",
					"Nightly"
				],
				[
					"cscratch (Windows)",
					"NightlySubmit"
				],
				[
					"cscratch (Windows)",
					"NightlyBuild"
				],
				[
					"cscratch (Windows)",
					"NightlyConfigure"
				],
				[
					"cscratch (Windows)",
					"Debug/demo_lib.lib: CXX_SHARED_LIBRARY_LINKER__demo_lib_Debug"
				],
				[
					"cscratch (Windows)",
					"Debug/image_viewer_lib.lib: CXX_SHARED_LIBRARY_LINKER__image_viewer_lib_Debug"
				],
				[
					"cscratch (Windows)",
					"NightlyMemoryCheck"
				],
				[
					"cscratch (Windows)",
					"Experimental"
				],
				[
					"cscratch (Windows)",
					"NightlyStart"
				],
				[
					"cscratch (Windows)",
					"NightlyUpdate"
				],
				[
					"cscratch (Windows)",
					"NightlyCoverage"
				],
				[
					"cscratch (Windows)",
					"NightlyMemCheck"
				],
				[
					"cscratch (Windows)",
					"ExperimentalBuild"
				],
				[
					"cscratch (Windows)",
					"ExperimentalStart"
				],
				[
					"cscratch (Windows)",
					"ExperimentalUpdate"
				],
				[
					"cscratch (Windows)",
					"ContinuousMemCheck"
				],
				[
					"cscratch (Windows)",
					"ExperimentalConfigure"
				],
				[
					"cscratch (Windows)",
					"ExperimentalTest"
				],
				[
					"cscratch (Windows)",
					"package_source"
				],
				[
					"cscratch (Windows)",
					"ExperimentalCoverage"
				],
				[
					"cscratch (Windows)",
					"ExperimentalMemCheck"
				],
				[
					"cscratch (Windows)",
					"ExperimentalSubmit"
				],
				[
					"cscratch (Windows)",
					"ContinuousStart"
				],
				[
					"cscratch (Windows)",
					"ContinuousUpdate"
				],
				[
					"cscratch (Windows)",
					"ContinuousSubmit"
				],
				[
					"cscratch (Windows)",
					"ContinuousConfigure"
				],
				[
					"cscratch (Windows)",
					"ContinuousBuild"
				],
				[
					"cscratch (Windows)",
					"ContinuousTest"
				],
				[
					"cscratch (Windows)",
					"ContinuousCoverage"
				],
				[
					"cscratch (Windows)",
					"package"
				],
				[
					"cscratch (Windows)",
					"test"
				],
				[
					"cscratch (Windows)",
					"rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"list_install_components"
				],
				[
					"cscratch (Windows)",
					"install/local"
				],
				[
					"cscratch (Windows)",
					"install"
				],
				[
					"cscratch (Windows)",
					"install/strip"
				],
				[
					"cscratch (Windows)",
					"code/foundation/package"
				],
				[
					"cscratch (Windows)",
					"code/foundation/package_source"
				],
				[
					"cscratch (Windows)",
					"code/foundation/rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"code/foundation/test"
				],
				[
					"cscratch (Windows)",
					"code/foundation/install/local"
				],
				[
					"cscratch (Windows)",
					"code/foundation/install"
				],
				[
					"cscratch (Windows)",
					"code/foundation/list_install_components"
				],
				[
					"cscratch (Windows)",
					"code/foundation/install/strip"
				],
				[
					"cscratch (Windows)",
					"code/gui/package"
				],
				[
					"cscratch (Windows)",
					"code/gui/package_source"
				],
				[
					"cscratch (Windows)",
					"code/gui/rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"code/gui/test"
				],
				[
					"cscratch (Windows)",
					"code/gui/list_install_components"
				],
				[
					"cscratch (Windows)",
					"code/gui/install/local"
				],
				[
					"cscratch (Windows)",
					"code/gui/install"
				],
				[
					"cscratch (Windows)",
					"code/gui/install/strip"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/package"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/package_source"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/test"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/install/local"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/install"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/list_install_components"
				],
				[
					"cscratch (Windows)",
					"cimgui-1.82dock/install/strip"
				],
				[
					"cscratch (Windows)",
					"glfw-3/package_source"
				],
				[
					"cscratch (Windows)",
					"glfw-3/package"
				],
				[
					"cscratch (Windows)",
					"glfw-3/rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"glfw-3/test"
				],
				[
					"cscratch (Windows)",
					"glfw-3/install/local"
				],
				[
					"cscratch (Windows)",
					"glfw-3/install"
				],
				[
					"cscratch (Windows)",
					"glfw-3/list_install_components"
				],
				[
					"cscratch (Windows)",
					"glfw-3/install/strip"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/rebuild_cache"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/test"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/package"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/package_source"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/install/local"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/install"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/list_install_components"
				],
				[
					"cscratch (Windows)",
					"glfw-3/src/install/strip"
				],
				[
					"cscratch (Windows)",
					"cimgui"
				],
				[
					"cscratch (Windows)",
					"cimgui.lib"
				],
				[
					"cscratch (Windows)",
					"demo"
				],
				[
					"cscratch (Windows)",
					"demo.exe"
				],
				[
					"cscratch (Windows)",
					"demo_lib"
				],
				[
					"cscratch (Windows)",
					"demo_lib.dll"
				],
				[
					"cscratch (Windows)",
					"foundation"
				],
				[
					"cscratch (Windows)",
					"foundation.lib"
				],
				[
					"cscratch (Windows)",
					"glfw"
				],
				[
					"cscratch (Windows)",
					"glfw3.lib"
				],
				[
					"cscratch (Windows)",
					"gui"
				],
				[
					"cscratch (Windows)",
					"gui.lib"
				],
				[
					"cscratch (Windows)",
					"gui_backend"
				],
				[
					"cscratch (Windows)",
					"gui_backend.lib"
				],
				[
					"cscratch (Windows)",
					"image_viewer"
				],
				[
					"cscratch (Windows)",
					"image_viewer.exe"
				],
				[
					"cscratch (Windows)",
					"image_viewer_lib"
				],
				[
					"cscratch (Windows)",
					"image_viewer_lib.dll"
				],
				[
					"cscratch (Windows)",
					"test_arena"
				],
				[
					"cscratch (Windows)",
					"test_arena.exe"
				],
				[
					"cscratch (Windows)",
					"test_array"
				],
				[
					"cscratch (Windows)",
					"test_array.exe"
				],
				[
					"cscratch (Windows)",
					"test_win32_threads"
				],
				[
					"cscratch (Windows)",
					"test_win32_threads.exe"
				],
				[
					"cscratch (Windows)",
					"uninstall"
				],
				[
					"cscratch (Windows)",
					"clean"
				]
			],
			[
				"cscratch (Windows)",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"keyb",
				"Preferences: Key Bindings"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"clan",
				"Clang Format: Select Style"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"ecc",
				"ECC: Show all errors"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"commen",
				"Toggle Comment"
			],
			[
				"c",
				"CMakeBuilder: Configure"
			],
			[
				"cmake",
				"CMakeBuilder: New Project"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Src/_Scratch/cscratch",
		"/D/Src/_Scratch/cscratch/code",
		"/D/Src/_Scratch/cscratch/code/demo",
		"/D/Src/_Scratch/cscratch/code/win32",
		"/D/Src/_Scratch/cscratch/data"
	],
	"file_history":
	[
		"/D/Src/_Scratch/cscratch/cscratch.sublime-project",
		"/D/Src_Scratch/cscratch/code/foundation/common.h",
		"/D/Src_Scratch/cscratch/code/api.h",
		"/D/Src/_Scratch/cscratch/code/foundation/common.h",
		"/D/Src/_Scratch/cscratch/code/api.h",
		"/C/Users/m.belotti/AppData/Roaming/Sublime Text/Packages/User/clang_format.sublime-settings"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "code/demo/app.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6982,
						"regions":
						{
						},
						"selection":
						[
							[
								435,
								388
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "code/api.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3142,
						"regions":
						{
						},
						"selection":
						[
							[
								1980,
								1980
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1076.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "code/foundation/common.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13242,
						"regions":
						{
						},
						"selection":
						[
							[
								3523,
								3523
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2390.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.ECC":
	{
		"height": 126.0
	},
	"output.exec":
	{
		"height": 303.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "cscratch (Windows)",
	"project": "cscratch.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 340.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
